// Package brain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package brain

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for PollerQueueEntryCmdType.
const (
	INFORMUSER       PollerQueueEntryCmdType = "INFORM_USER"
	PUSHDOCKERIMAGE  PollerQueueEntryCmdType = "PUSH_DOCKER_IMAGE"
	UPLOADSTATICFILE PollerQueueEntryCmdType = "UPLOAD_STATIC_FILE"
)

// CliPollRequest defines model for CliPollRequest.
type CliPollRequest struct {
	CommandId *string `json:"commandId,omitempty"`
	ExecToken *string `json:"execToken,omitempty"`
}

// CliPollResponse defines model for CliPollResponse.
type CliPollResponse struct {
	Commands []PollerQueueEntry `json:"commands"`
}

// CreateDeploymentRequest defines model for CreateDeploymentRequest.
type CreateDeploymentRequest struct {
	EnvironmentName string `json:"environmentName"`
}

// CreateDeploymentResponse defines model for CreateDeploymentResponse.
type CreateDeploymentResponse struct {
	DeploymentId string `json:"deploymentId"`
	SessionToken string `json:"sessionToken"`
	UploadUrl    string `json:"uploadUrl"`
}

// DockerLoginResponse defines model for DockerLoginResponse.
type DockerLoginResponse struct {
	Password string `json:"password"`
	Url      string `json:"url"`
	UserName string `json:"userName"`
}

// PollerQueueEntry defines model for PollerQueueEntry.
type PollerQueueEntry struct {
	CmdType      PollerQueueEntryCmdType `json:"cmdType"`
	Command      string                  `json:"command"`
	CreatedAt    *int64                  `json:"createdAt,omitempty"`
	DeploymentId string                  `json:"deploymentId"`
	Id           *string                 `json:"id,omitempty"`
	SeqOrder     *int64                  `json:"seqOrder,omitempty"`
}

// PollerQueueEntryCmdType defines model for PollerQueueEntry.CmdType.
type PollerQueueEntryCmdType string

// UserAuthenticatedResponse defines model for UserAuthenticatedResponse.
type UserAuthenticatedResponse struct {
	Token string `json:"token"`
}

// UserAuthenticationRequest defines model for UserAuthenticationRequest.
type UserAuthenticationRequest struct {
	Secret   string `json:"secret"`
	UserName string `json:"userName"`
}

// CliAuthenticateParams defines parameters for CliAuthenticate.
type CliAuthenticateParams struct {
	Request UserAuthenticationRequest `form:"request" json:"request"`
}

// CreateNewDeploymentJSONRequestBody defines body for CreateNewDeployment for application/json ContentType.
type CreateNewDeploymentJSONRequestBody = CreateDeploymentRequest

// PollForCommandsJSONRequestBody defines body for PollForCommands for application/json ContentType.
type PollForCommandsJSONRequestBody = CliPollRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// BrainClient which conforms to the OpenAPI3 specification for this service.
type BrainClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*BrainClient) error

// Creates a new BrainClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*BrainClient, error) {
	// create a client with sane default values
	client := BrainClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *BrainClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *BrainClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CliAuthenticate request
	CliAuthenticate(ctx context.Context, params *CliAuthenticateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewDeployment(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PollForCommands request with any body
	PollForCommandsWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PollForCommands(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotifyUploadCompleted request
	NotifyUploadCompleted(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerLogin request
	GetDockerLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *BrainClient) CliAuthenticate(ctx context.Context, params *CliAuthenticateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCliAuthenticateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) CreateNewDeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) CreateNewDeployment(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) PollForCommandsWithBody(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPollForCommandsRequestWithBody(c.Server, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) PollForCommands(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPollForCommandsRequest(c.Server, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) NotifyUploadCompleted(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyUploadCompletedRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *BrainClient) GetDockerLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCliAuthenticateRequest generates requests for CliAuthenticate
func NewCliAuthenticateRequest(server string, params *CliAuthenticateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "request", runtime.ParamLocationQuery, params.Request); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewDeploymentRequest calls the generic CreateNewDeployment builder with application/json body
func NewCreateNewDeploymentRequest(server string, body CreateNewDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewDeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewDeploymentRequestWithBody generates requests for CreateNewDeployment with any type of body
func NewCreateNewDeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPollForCommandsRequest calls the generic PollForCommands builder with application/json body
func NewPollForCommandsRequest(server string, deploymentId string, body PollForCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPollForCommandsRequestWithBody(server, deploymentId, "application/json", bodyReader)
}

// NewPollForCommandsRequestWithBody generates requests for PollForCommands with any type of body
func NewPollForCommandsRequestWithBody(server string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/poll", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotifyUploadCompletedRequest generates requests for NotifyUploadCompleted
func NewNotifyUploadCompletedRequest(server string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/deployment/%s/stack-uploaded", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerLoginRequest generates requests for GetDockerLogin
func NewGetDockerLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cli/docker/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *BrainClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *BrainClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CliAuthenticate request
	CliAuthenticateWithResponse(ctx context.Context, params *CliAuthenticateParams, reqEditors ...RequestEditorFn) (*CliAuthenticateResponse, error)

	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	CreateNewDeploymentWithResponse(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	// PollForCommands request with any body
	PollForCommandsWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error)

	PollForCommandsWithResponse(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error)

	// NotifyUploadCompleted request
	NotifyUploadCompletedWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*NotifyUploadCompletedResponse, error)

	// GetDockerLogin request
	GetDockerLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDockerLoginResponse, error)
}

type CliAuthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CliAuthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CliAuthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateNewDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PollForCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PollForCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PollForCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotifyUploadCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotifyUploadCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotifyUploadCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDockerLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CliAuthenticateWithResponse request returning *CliAuthenticateResponse
func (c *ClientWithResponses) CliAuthenticateWithResponse(ctx context.Context, params *CliAuthenticateParams, reqEditors ...RequestEditorFn) (*CliAuthenticateResponse, error) {
	rsp, err := c.CliAuthenticate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCliAuthenticateResponse(rsp)
}

// CreateNewDeploymentWithBodyWithResponse request with arbitrary body returning *CreateNewDeploymentResponse
func (c *ClientWithResponses) CreateNewDeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateNewDeploymentWithResponse(ctx context.Context, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

// PollForCommandsWithBodyWithResponse request with arbitrary body returning *PollForCommandsResponse
func (c *ClientWithResponses) PollForCommandsWithBodyWithResponse(ctx context.Context, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error) {
	rsp, err := c.PollForCommandsWithBody(ctx, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePollForCommandsResponse(rsp)
}

func (c *ClientWithResponses) PollForCommandsWithResponse(ctx context.Context, deploymentId string, body PollForCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PollForCommandsResponse, error) {
	rsp, err := c.PollForCommands(ctx, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePollForCommandsResponse(rsp)
}

// NotifyUploadCompletedWithResponse request returning *NotifyUploadCompletedResponse
func (c *ClientWithResponses) NotifyUploadCompletedWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*NotifyUploadCompletedResponse, error) {
	rsp, err := c.NotifyUploadCompleted(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyUploadCompletedResponse(rsp)
}

// GetDockerLoginWithResponse request returning *GetDockerLoginResponse
func (c *ClientWithResponses) GetDockerLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDockerLoginResponse, error) {
	rsp, err := c.GetDockerLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerLoginResponse(rsp)
}

// ParseCliAuthenticateResponse parses an HTTP response from a CliAuthenticateWithResponse call
func ParseCliAuthenticateResponse(rsp *http.Response) (*CliAuthenticateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CliAuthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateNewDeploymentResponse parses an HTTP response from a CreateNewDeploymentWithResponse call
func ParseCreateNewDeploymentResponse(rsp *http.Response) (*CreateNewDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePollForCommandsResponse parses an HTTP response from a PollForCommandsWithResponse call
func ParsePollForCommandsResponse(rsp *http.Response) (*PollForCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PollForCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNotifyUploadCompletedResponse parses an HTTP response from a NotifyUploadCompletedWithResponse call
func ParseNotifyUploadCompletedResponse(rsp *http.Response) (*NotifyUploadCompletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotifyUploadCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDockerLoginResponse parses an HTTP response from a GetDockerLoginWithResponse call
func ParseGetDockerLoginResponse(rsp *http.Response) (*GetDockerLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
